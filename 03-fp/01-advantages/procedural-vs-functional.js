// 可変性（Mutablity）と不変性（Immutablity）
// 手続き型が文（Statement）を多用するいっぽう、関数型では式（Expression）を組み合わせてプログラムを構成
// 手続き型ではボトムアップ的に積み上げていって最終成果物を完成させる。最初 octuples は空配列だったのが、要素がひとつずつ追加されていって完成に至ってる。
// 関数型では、最初から完成形を見据えた上で大雑把なところから絞り込んでいく形になる。このサンプルではまず 1 から 100 の整数配列を作った上で、そこから 8 で割り切れるものだけを抜き出してる

// 手続き型プログラミング
{
  const octuples = [];

  for (let n = 1; n < 101; n += 1) {
    if (n % 8 === 0) {
      octuples.push(n);
    }
  }

  console.log(octuples);
}
// for 文による定型処理とはいえ繰り返しのたびに再代入されてる、ループブロックの中でも任意に上書き可能

// 関数型プログラミング
{
  const range = (start, end) => [...new Array(end - start).keys()].map((n) => n + start);
  const octuples = range(1, 101).filter((n) => n % 8 === 0);
  console.log(octuples);
}
// 関数型で書いたほうは変数のひとつたりとも再代入や破壊的変更がなされてないのに対して、手続き型のほうは octuples に 12 回の破壊的変更、n に 100 回の再代入がある
// 完成形を見据えて絞り込まれていく関数型のコードのほうが、読むほうもだけど書くほうも迷子になりづらい
// 熟練のプログラマが書く関数型のコードは意図がはっきりしてて可読性が高い